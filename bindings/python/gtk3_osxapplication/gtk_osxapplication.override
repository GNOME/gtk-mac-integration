/* -*- Mode: C; c-basic-offset: 4 -*- */
%%
headers
#include <Python.h>
#include <gtk/gtk.h>
#include <pygtk-2.0/pygobject.h>
#include <gtkosxapplication.h>

%%
modulename gtk_osxapplication
%%
import gi.repository.GObject.Object as PyGObject_Type
import gi.repository.GdkPixbuf.Pixbuf as PyGdkPixbuf_Type
import gi.repository.Gtk.MenuShell as PyGtkMenuShell_Type
import gi.repository.Gtk.MenuItem as PyGtkMenuItem_Type
import gi.repository.Gtk.Window as PyGtkWindow_Type
import gi.repository.Gtk.Widget as PyGtkWidget_Type
%%
ignore-glob
  *_get_type
%%
override gtk_osxapplication_add_app_menu_group noargs
static PyObject*
_wrap_gtk_osxapplication_add_app_menu_group (PyGObject *self)
{
    GtkOSXApplicationMenuGroup *group;
    PyObject *ret;

    group = gtk_osxapplication_add_app_menu_group (GTK_OSX_APPLICATION(self->obj));

    ret = PyCObject_FromVoidPtr ((void *) group, NULL);

    return ret;
}
%%
override gtk_osxapplication_add_app_menu_item kwargs
static PyObject*
_wrap_gtk_osxapplication_add_app_menu_item (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "group", "item", NULL };
    PyObject *pygroup;
    PyObject *pyitem;
    GtkOSXApplicationMenuGroup *group;
    GtkMenuItem *item;
   if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO!:add_app_menu_item", 
				     kwlist,
                                     &pygroup, 
                                     &PyGtkMenuItem_Type,
				     &pyitem))
        return NULL;

    Py_INCREF (Py_None);
    group = PyCObject_AsVoidPtr (pygroup);
    item = GTK_MENU_ITEM (pygobject_get (pyitem));
    g_return_val_if_fail(group != NULL, Py_None);
    gtk_osxapplication_add_app_menu_item (GTK_OSX_APPLICATION(self->obj), group, item);
    return Py_None;
}
%%
override gtk_osxapplication_insert_app_menu_item kwargs
static PyObject*
_wrap_gtk_osxapplication_insert_app_menu_item (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "item", "index", NULL };
    PyObject *pyitem;
    GtkWidget *item;
    gint index;
   if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!i:insert_app_menu_item",
				    kwlist,
				    &PyGtkWidget_Type,
				    &pyitem, &index))
        return NULL;

    Py_INCREF (Py_None);
    item = GTK_WIDGET (pygobject_get (pyitem));
    gtk_osxapplication_insert_app_menu_item (GTK_OSX_APPLICATION(self->obj), item, index);
    return Py_None;
}
%%
override gtk_osxapplication_set_menu_bar kwargs
static PyObject*
_wrap_gtk_osxapplication_set_menu_bar (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "menu_shell", NULL };
    PyObject *pyitem;
    GtkMenuShell *menu_shell;
    if ( !PyArg_ParseTupleAndKeywords( args, kwargs, "O!:set_menu_bar",
					kwlist,
				       &PyGtkMenuShell_Type, &pyitem))
	return NULL;
    Py_INCREF (Py_None);
    menu_shell = GTK_MENU_SHELL(pygobject_get(pyitem));
    gtk_osxapplication_set_menu_bar(GTK_OSX_APPLICATION(self->obj), menu_shell);
    return Py_None;
}
%%
override gtk_osxapplication_set_window_menu kwargs
static PyObject*
_wrap_gtk_osxapplication_set_window_menu (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "menu_item", NULL };
    PyObject *pyitem;
    GtkMenuItem *menu_item;
    if ( !PyArg_ParseTupleAndKeywords( args, kwargs, "O!:set_window_menu",
					kwlist,
					&PyGtkMenuItem_Type, &pyitem))
	return NULL;
    Py_INCREF (Py_None);
    menu_item = GTK_MENU_ITEM(pygobject_get(pyitem));
    gtk_osxapplication_set_window_menu(GTK_OSX_APPLICATION(self->obj), menu_item);
    return Py_None;
}
%%
override gtk_osxapplication_set_help_menu kwargs
static PyObject*
_wrap_gtk_osxapplication_set_help_menu (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "menu_item", NULL };
    PyObject *pyitem;
    GtkMenuItem *menu_item;
    if ( !PyArg_ParseTupleAndKeywords( args, kwargs, "O!:set_help_menu",
					kwlist,
					&PyGtkMenuItem_Type, &pyitem))
	return NULL;
    Py_INCREF (Py_None);
    menu_item = GTK_MENU_ITEM(pygobject_get(pyitem));
    gtk_osxapplication_set_help_menu(GTK_OSX_APPLICATION(self->obj), menu_item);
    return Py_None;
}
%%
override gtk_osxapplication_set_dock_menu kwargs
static PyObject*
_wrap_gtk_osxapplication_set_dock_menu (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "menu_shell", NULL };
    PyObject *pyitem;
    GtkMenuShell *menu_shell;
    if ( !PyArg_ParseTupleAndKeywords( args, kwargs, "O!:set_dock_menu",
					kwlist,
					&PyGtkMenuShell_Type, &pyitem))
	return NULL;
    Py_INCREF (Py_None);
    menu_shell = GTK_MENU_SHELL(pygobject_get(pyitem));
    gtk_osxapplication_set_dock_menu(GTK_OSX_APPLICATION(self->obj), menu_shell);
    return Py_None;
}
%%
override gtk_osxapplication_set_dock_icon_pixbuf kwargs
static PyObject*
_wrap_gtk_osxapplication_set_dock_icon_pixbuf (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pixbuf", NULL };
    PyObject *pyitem;
    GdkPixbuf *pixbuf;
    if ( !PyArg_ParseTupleAndKeywords( args, kwargs, "O!:set_dock_icon_pixbuf",
					kwlist,
					&PyGdkPixbuf_Type, &pyitem))
	return NULL;
    Py_INCREF (Py_None);
    pixbuf = GDK_PIXBUF(pygobject_get(pyitem));
    gtk_osxapplication_set_dock_menu(GTK_OSX_APPLICATION(self->obj), pixbuf);
    return Py_None;
}
%%
override quartz_application_get_bundle_info kwargs
static PyObject*
_wrap_quartz_application_get_bundle_info (PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    char *key;
    gpointer item;
    PyObject *ret;
    if ( !PyArg_ParseTupleAndKeywords( args, kwargs, "s:get_bundle_info",
					kwlist,
					&PyGdkPixbuf_Type))
	return NULL;

    item = quartz_application_get_bundle_info (key);

    ret = PyCObject_FromVoidPtr (item, NULL);

    return ret;
}
